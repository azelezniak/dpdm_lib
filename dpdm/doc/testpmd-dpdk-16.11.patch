diff -uNr a/app/test-pmd/cmdline.c b/app/test-pmd/cmdline.c
--- a/app/test-pmd/cmdline.c	2017-12-12 14:00:11.030567609 -0500
+++ b/app/test-pmd/cmdline.c	2017-12-12 18:29:32.694385644 -0500
@@ -832,6 +832,44 @@
 	},
 };
 
+/* *** open/close ndc (NetDev Client) *** */
+struct cmd_operate_ndc_result {
+	cmdline_fixed_string_t keyword;
+	cmdline_fixed_string_t name;
+	cmdline_fixed_string_t value;
+};
+
+static void cmd_operate_ndc_parsed(void *parsed_result,
+				__attribute__((unused)) struct cmdline *cl,
+				__attribute__((unused)) void *data)
+{
+	struct cmd_operate_ndc_result *res = parsed_result;
+
+	if (!strcmp(res->name, "open"))
+		open_ndc();
+	else if (!strcmp(res->name, "close"))
+		close_ndc();
+	else
+		printf("Unknown parameter\n");
+}
+
+cmdline_parse_token_string_t cmd_operate_ndc_all_cmd =
+	TOKEN_STRING_INITIALIZER(struct cmd_operate_ndc_result, keyword,
+								"ndc");
+cmdline_parse_token_string_t cmd_operate_ndc_all_port =
+	TOKEN_STRING_INITIALIZER(struct cmd_operate_ndc_result, name,
+						"open#close");
+
+cmdline_parse_inst_t cmd_operate_ndc = {
+	.f = cmd_operate_ndc_parsed,
+	.data = NULL,
+	.help_str = "ndc open|close: Open/Close ndc interface",
+	.tokens = {
+		(void *)&cmd_operate_ndc_all_cmd,
+		(void *)&cmd_operate_ndc_all_port,
+		NULL,
+	},
+};
 
 /* *** start/stop/close all ports *** */
 struct cmd_operate_port_result {
@@ -11496,6 +11534,7 @@
 	(cmdline_parse_inst_t *)&cmd_mac_addr,
 	(cmdline_parse_inst_t *)&cmd_set_qmap,
 	(cmdline_parse_inst_t *)&cmd_operate_port,
+	(cmdline_parse_inst_t *)&cmd_operate_ndc,
 	(cmdline_parse_inst_t *)&cmd_operate_specific_port,
 	(cmdline_parse_inst_t *)&cmd_operate_attach_port,
 	(cmdline_parse_inst_t *)&cmd_operate_detach_port,
diff -uNr a/app/test-pmd/Makefile b/app/test-pmd/Makefile
--- a/app/test-pmd/Makefile	2017-12-12 14:00:10.982567610 -0500
+++ b/app/test-pmd/Makefile	2017-12-12 18:29:32.690385644 -0500
@@ -61,10 +61,23 @@
 _LDLIBS-$(CONFIG_RTE_LIBRTE_IXGBE_PMD) += -lrte_pmd_ixgbe
 
 CFLAGS_cmdline.o := -D_GNU_SOURCE
+CFLAGS_testpmd.o := -D_GNU_SOURCE
 
 # this application needs libraries first
 DEPDIRS-y += lib drivers
 
+# additional build flag set for using DPDM library
+CFLAGS += -I$(RTE_SDKEX)/build/include
+CFLAGS += -I$(VNI_NETDEV) -I$(PWD) -lpthread
+CFLAGS += $(WERROR_FLAGS)
+
+LDLIBS += -L$(RTE_SDKEX)/build/lib
+LDLIBS += --whole-archive
+LDLIBS += -lrte_ethdev_ex
+LDLIBS += -lrte_pmd_ixgbe_ex
+LDLIBS += -lrte_pmd_i40e_ex
+LDLIBS += -lrte_vni_util
+LDLIBS += --no-whole-archive
 include $(RTE_SDK)/mk/rte.app.mk
 
 endif
diff -uNr a/app/test-pmd/parameters.c b/app/test-pmd/parameters.c
--- a/app/test-pmd/parameters.c	2017-12-12 14:00:10.986567610 -0500
+++ b/app/test-pmd/parameters.c	2017-12-12 18:29:32.690385644 -0500
@@ -566,7 +566,7 @@
 	argvopt = argv;
 
 #ifdef RTE_LIBRTE_CMDLINE
-#define SHORTOPTS "i"
+#define SHORTOPTS "if:o:"
 #else
 #define SHORTOPTS ""
 #endif
@@ -578,6 +578,18 @@
 			printf("Interactive-mode selected\n");
 			interactive = 1;
 			break;
+		/* interface name for netdev */
+		case 'f':
+			save_inf_name(optarg);
+			break;
+
+		/* interface name for netdev */
+		case 'o':
+			{
+				char *dummy = NULL;
+				vni_core = strtol((const char*)optarg, &dummy, 10);
+			}
+			break;
 #endif
 		case 'a':
 			printf("Auto-start selected\n");
diff -uNr a/app/test-pmd/testpmd.c b/app/test-pmd/testpmd.c
--- a/app/test-pmd/testpmd.c	2017-12-12 14:00:10.962567610 -0500
+++ b/app/test-pmd/testpmd.c	2017-12-12 18:29:32.690385644 -0500
@@ -79,7 +79,16 @@
 #include <rte_pdump.h>
 #endif
 
+#include <sched.h>
+#include <getopt.h>
+#include <unistd.h>
+#include <pthread.h>
+
+#include <rte_atomic.h>
+
 #include "testpmd.h"
+#include "rte_dpdm.h"
+#include "ndc.h"
 
 uint16_t verbose_level = 0; /**< Silent by default. */
 
@@ -87,6 +96,24 @@
 uint8_t interactive = 0;
 uint8_t auto_start = 0;
 
+/* ndc related parameters */
+
+typedef struct _ndc_thread_info {
+	pthread_t thd_id;
+	int num_of_ports;
+	char inf_name[MAXI_INTERFACE_NAME];
+	pid_t dest_pid;
+	rte_ndc_status status;
+	rte_atomic32_t *done;
+} ndc_thread_info;
+
+int nl_kernel = 1;
+int vni_core = 4;
+pid_t app_pid = 0;
+char inf_name[MAXI_INTERFACE_NAME]="dpdk";
+static rte_atomic32_t done;
+static ndc_thread_info thread_info;
+
 /*
  * NUMA support configuration.
  * When set, the NUMA support attempts to dispatch the allocation of the
@@ -326,6 +353,75 @@
 static void map_port_queue_stats_mapping_registers(uint8_t pi, struct rte_port *port);
 static void check_all_ports_link_status(uint32_t port_mask);
 
+static void*
+recv_thread(void* arg)
+{
+	ndc_thread_info *thd_info = arg;
+	pid_t dest_pid = 0; /* 0: for kernel */
+
+	rte_ndc_session_init(thd_info->done);	
+	thd_info->status = rte_ndc_client(thd_info->inf_name,
+		thd_info->num_of_ports,
+		dest_pid,
+		thd_info->done);
+
+	return NULL;
+}
+
+void save_inf_name(char *name)
+{
+	strncpy(inf_name, name, strlen(name)+1);
+}
+
+void close_ndc(void)
+{
+	if ((rte_atomic32_read(&done) == 0) ||
+		rte_ndc_close_confirm(&done))
+		return;
+
+	rte_ndc_session_stop(&done);
+	while (!rte_ndc_close_confirm(&done))
+		usleep(100);
+
+}
+
+/*
+ * Create an interface to communicate with VNI kernel module.
+ * This interface serves as a NDC (Network Device Client) which
+ * send/receive packets to/from kernel Netlink interface
+ * 
+ */
+void
+open_ndc(void)
+{
+	pthread_attr_t attr;
+	cpu_set_t cpuset;
+	int status;
+
+	if ((rte_atomic32_read(&done) != 0) && !rte_ndc_close_confirm(&done))
+		return;
+
+	strncpy(thread_info.inf_name, inf_name, strlen(inf_name)+1);
+	thread_info.num_of_ports = rte_eth_dev_count();
+	if (nl_kernel)
+		thread_info.dest_pid = 0;
+	else
+		thread_info.dest_pid = app_pid;
+
+	thread_info.done = &done;
+	thread_info.status = 0;
+	/* Setup CPU affinity */
+	CPU_ZERO(&cpuset);
+	CPU_SET(vni_core, &cpuset);
+	pthread_attr_init(&attr);
+	pthread_attr_setaffinity_np(&attr, sizeof(cpu_set_t), &cpuset);
+
+	status = pthread_create(&thread_info.thd_id,
+		&attr, &recv_thread, &thread_info);
+	if (status)
+		printf("Fail to create thread with error %d\n", status);
+}
+
 /*
  * Check if all the ports are started.
  * If yes, return positive value. If not, return zero.
@@ -2104,6 +2200,9 @@
 	if (nb_ports == 0)
 		RTE_LOG(WARNING, EAL, "No probed ethernet devices\n");
 
+	if (rte_dev_probe_extension(nb_ports))
+		printf("Fail to connect extended drivers \n");
+
 	/* allocate port structures, and init them */
 	init_port();
 
@@ -2129,6 +2228,8 @@
 	if (start_port(RTE_PORT_ALL) != 0)
 		rte_exit(EXIT_FAILURE, "Start ports failed\n");
 
+	open_ndc();
+
 	/* set all ports to promiscuous mode by default */
 	FOREACH_PORT(port_id, ports)
 		rte_eth_promiscuous_enable(port_id);
diff -uNr a/app/test-pmd/testpmd.h b/app/test-pmd/testpmd.h
--- a/app/test-pmd/testpmd.h	2017-12-12 14:00:10.982567610 -0500
+++ b/app/test-pmd/testpmd.h	2017-12-12 18:29:32.690385644 -0500
@@ -298,6 +298,9 @@
 extern uint8_t  mp_anon; /**< set by "--mp-anon" parameter */
 extern uint8_t no_link_check; /**<set by "--disable-link-check" parameter */
 extern volatile int test_done; /* stop packet forwarding when set to 1. */
+extern int nl_kernel;
+extern int vni_core;
+extern pid_t app_pid;
 
 #ifdef RTE_NIC_BYPASS
 extern uint32_t bypass_timeout; /**< Store the NIC bypass watchdog timeout */
@@ -589,6 +592,11 @@
 int rx_queue_id_is_invalid(queueid_t rxq_id);
 int tx_queue_id_is_invalid(queueid_t txq_id);
 
+/* ndc management */
+void open_ndc(void);
+void close_ndc(void);
+void save_inf_name(char *name);
+
 /* Functions to manage the set of filtered Multicast MAC addresses */
 void mcast_addr_add(uint8_t port_id, struct ether_addr *mc_addr);
 void mcast_addr_remove(uint8_t port_id, struct ether_addr *mc_addr);
